import discord from discord.ext import commands from discord import app_commands import random import asyncio

intents = discord.Intents.default() bot = commands.Bot(command_prefix="/", intents=intents)

def generate_azure_yeno_prediction(digits: int): return round(random.uniform(0.125000, 0.126999), digits)

def generate_offset(): return round(random.uniform(-0.03, 0.01), 2)

@bot.event async def on_ready(): print(f"Bot ready as {bot.user}.") try: synced = await bot.tree.sync() print(f"Synced {len(synced)} command(s).") except Exception as e: print(e)

@bot.tree.command(name="genz") @app_commands.describe( ping="Enter your ping (e.g., 68)", mode="Choose between 'camlock' or 'target'", type="Choose between 'normal' or 'xy'", digits="Number of digits (8â€“19 recommended)", set="How many sets to generate", yeno="Enable Yeno Optimized Mode", script="Choose script: psalm or azure" ) async def generate( interaction: discord.Interaction, ping: int, mode: str, type: str, digits: int, set: int, yeno: bool = False, script: str = "azure" ): if not (8 <= digits <= 22): await interaction.response.send_message("Digit count must be between 8 and 22.", ephemeral=True) return

results = []
used = set()

for _ in range(set):
while True:
if script == "azure" and yeno:
pred = generate_azure_yeno_prediction(digits)
else:
pred = round(random.uniform(0.123000, 0.126999), digits)
if pred not in used:
used.add(pred)
break

jump = generate_offset()  
fall = generate_offset()  
results.append(f"Prediction: {pred}\nJump:       {jump}\nFall:       {fall}\n")

msg = f"Ping: {ping}\nMode: {mode}\nType: {type}\nDigits: {digits}\nYeno Optimized: {yeno}\nScript: {script}\n\n" + "\n".join(results)
await interaction.response.send_message(msg[:2000])

TOKEN = "YOUR_BOT_TOKEN_HERE" bot.run(TOKEN)

